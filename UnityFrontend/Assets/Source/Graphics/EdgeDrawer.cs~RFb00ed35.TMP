using System;
using System.Collections.Generic;
using System.Linq;
using Generator;
using UnityEngine;
using Vector3 = UnityEngine.Vector3;
using IridiumVector3 = Generator.Vector3;

namespace Graphics
{
    public class EdgeDrawer
    {
        public const int NumberOfVerticesPerEdge = 50;

        private readonly GameObject _parentObject;

        private readonly Dictionary<IArc, GameObject> _edgeListObjects;
        private readonly Dictionary<IArc, GameObject> _activeEdgeObject;

        private readonly Dictionary<IArc, List<IridiumVector3>> _arcToEdges;
        private readonly Dictionary<IArc, int> _edgeListCounts; 
        private readonly Beachline _beachline;

        public EdgeDrawer(EdgeSet edgeSet, Beachline beachline)
        {
            _arcToEdges = edgeSet.CurrentEdgeDict();

            _beachline = beachline;
            _edgeListObjects = new Dictionary<IArc, GameObject>();
            _edgeListCounts = new Dictionary<IArc, int>();

            _parentObject = new GameObject("Edges");
            _activeEdgeObject = CreateActiveEdgesObject();

        }

        private GameObject CreateActiveEdgesObject()
        {
            var gameObject = new GameObject("Active Edges");
            var meshFilter = gameObject.AddComponent<MeshFilter>();
            var renderer = gameObject.AddComponent<MeshRenderer>();
            renderer.material = Resources.Load("EdgeMaterial", typeof(Material)) as Material;

            return gameObject;
        }

        public void Update()
        {
            foreach (var arcAndEdgeList in _arcToEdges)
            {
                var arc = arcAndEdgeList.Key;
                var edgeList = arcAndEdgeList.Value;

                if (!_edgeListObjects.ContainsKey(arc))
                {
                    var edgeListObject = DrawEdgeList(edgeList);
                    edgeListObject.transform.parent = _parentObject.transform;
                    _edgeListObjects.Add(arc, edgeListObject);
                    _edgeListCounts.Add(arc, edgeList.Count);
                }
                else if (_edgeListCounts[arc] != edgeList.Count)
                {
                    var edgeListMeshFilter = _edgeListObjects[arc].GetComponent<MeshFilter>();
                    var newVertices = VerticesInEdgeList(edgeList);
                    DrawingUtilities.UpdateLineObject(edgeListMeshFilter, newVertices);
                    _edgeListCounts[arc] = edgeList.Count;
                }
            }

            UpdateActiveEdges();
        }

        private void UpdateActiveEdges()
        {
            //TODO: Replace straight edges with arcs of great circle.
            if (_beachline.Count() <= 1)
            {
                return;
            }

            var vertices = new List<Vector3>();
            var indexArrays = new List<int[]>();
            foreach (var arc in _beachline)
            {
                var origin = _arcToEdges[arc].Last().ToUnityVector3();
                var destination = arc.PointOfIntersection(_beachline.Sweepline).ToUnityVector3();

                var edgeVertices = DrawingUtilities.VerticesOnGreatArc(origin, destination, NumberOfVerticesPerEdge).ToList();
                var edgeIndices = Enumerable.Range(vertices.Count, edgeVertices.Count()).ToArray();

                vertices.AddRange(edgeVertices);
                indexArrays.Add(edgeIndices);
            }

            var newMesh = new Mesh
            {
                vertices = vertices.ToArray(),
                uv = Enumerable.Repeat(new Vector2(0, 0), vertices.Count).ToArray(),
                subMeshCount = indexArrays.Count
            };
            for (int i = 0; i < indexArrays.Count; i++)
            {
                newMesh.SetIndices(indexArrays[i], MeshTopology.LineStrip, i);
            }
            newMesh.RecalculateNormals();

            _activeEdgeObject.GetComponent<MeshFilter>().mesh = newMesh;
        }

        private static GameObject DrawEdgeList(List<IridiumVector3> edgeList)
        {
            var vertices = VerticesInEdgeList(edgeList);
            var gameObject = DrawingUtilities.CreateLineObject("Edge list", vertices, "EdgeMaterial");

            return gameObject;
        }

        private static Vector3[] VerticesInEdgeList(List<IridiumVector3> edgeList)
        {
            var vertices = new List<Vector3>();
            for (int i = 1; i < edgeList.Count; i++)
            {
                var verticesOfArc = DrawingUtilities.VerticesOnGreatArc(edgeList[i-1].ToUnityVector3(), edgeList[i].ToUnityVector3(), NumberOfVerticesPerEdge);
                vertices.AddRange(verticesOfArc); 
            }
            return vertices.ToArray();
        }
    }
}